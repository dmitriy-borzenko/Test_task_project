{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dialog/dialog.component.ts","webpack:///src/app/dialog/dialog.component.html","webpack:///src/app/material.module.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/table/table.component.ts","webpack:///src/app/table/table.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","DialogComponent","data","MaterialModule","UserService","http","baseURL","get","user","put","providedIn","TableComponent","dialog","userService","displayedColumns","dataSource","getUsers","subscribe","sort","source","newUser","filteredData","filter","item","putUsers","dialogRef","open","width","totalCount","length","countActive","active","openDialog","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'test-task';\n}\n","<app-table></app-table>","import { MaterialModule } from './material.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { TableComponent } from './table/table.component';\nimport { FormsModule } from '@angular/forms';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TableComponent,\n    DialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MaterialModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogData } from '../table/table.component';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.css']\n})\nexport class DialogComponent  {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n  \n}\n","<h1 mat-dialog-title>Details</h1>\n<hr>\n<div mat-dialog-content class=\"dialog-content\">\n  <p>Total count: <span>{{data.totalCount}}</span></p>\n  <p>Active count: <span>{{data.countActive}}</span></p>\n</div>\n<div mat-dialog-actions class=\"button-close\">\n  <button mat-raised-button mat-dialog-close>Close</button>\n</div>","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    MatButtonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    MatSortModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    MatSortModule\n  ]\n})\nexport class MaterialModule { }\n","import { User } from './../models/user';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  baseURL: string = \"https://localhost:44337/api/users\";\n\n  getUsers() {\n    return this.http.get(this.baseURL);\n  }\n\n  putUsers(user: User) {\n    return this.http.put(`${this.baseURL}/${user.id}`, user)\n  }\n}\n","import { UserService } from './../services/user.service';\nimport { User } from './../models/user';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from '../dialog/dialog.component';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\nexport interface DialogData {\n  totalCount: number;\n  countActive: number;\n}\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\n\nexport class TableComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'name', 'active'];\n  dataSource: any = null;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(public dialog: MatDialog, private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.userService.getUsers().subscribe((data: User[]) => {\n      this.dataSource = new MatTableDataSource<User>(data);\n      this.dataSource.sort = this.sort;\n    });\n  }\n\n  onChange(e) {\n    const id = e.source.id;\n    const newUser = this.dataSource.filteredData.filter(item => item.id === +id);\n    this.userService.putUsers(newUser[0]).subscribe(() => { });\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(DialogComponent, {\n      width: '450px',\n      data: {\n        totalCount: this.dataSource.filteredData.length,\n        countActive: this.dataSource.filteredData.filter(item => item.active === true).length\n      }\n    });\n  }\n}\n","<div class=\"container\">\n  <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\n\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"id\" >\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n\n    <!-- Active Column -->\n    <ng-container matColumnDef=\"active\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Active </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <mat-checkbox id=\"{{element.id}}\" color=\"primary\" (change)=\"onChange($event)\" [(ngModel)]=\"element.active\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" [ngClass]=\"{'make-grey': row.active }\"></tr>\n  </table>\n\n  <button color=\"primary\" (click)=\"openDialog()\" class=\"button__total\" mat-raised-button>Total</button>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}